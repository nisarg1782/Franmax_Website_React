{"version":3,"file":"static/js/7764.6e411d6a.chunk.js","mappings":"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","sources":["components/Partner.jsx","utils/validatePartnerInquiryForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './design/Partner.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Select from 'react-select';\r\nimport { validatePartnerForm } from '../utils/validatePartnerInquiryForm';\r\nimport { getApiUrl } from '../utils/api';\r\nimport ThankYouModal from './ThankYouModal';\r\n\r\n\r\nconst Partner = () => {\r\n  const [states, setStates] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [form, setForm] = useState({\r\n    name: '',\r\n    email: '',\r\n    contact: '',\r\n    state_id: '',\r\n    city_id: '',\r\n    isFranchise: '', // New field for the franchise option\r\n    message: ''\r\n  });\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(getApiUrl('get-indian-states.php'))\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const options = data.map(state => ({ value: state.id, label: state.name }));\r\n        setStates(options);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (form.state_id) {\r\n      fetch(getApiUrl(`get-cities.php?state_id=${form.state_id}`))\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          const options = data.map(city => ({ value: city.id, label: city.name }));\r\n          setCities(options);\r\n        });\r\n    } else {\r\n      setCities([]);\r\n    }\r\n  }, [form.state_id]);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setForm(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const errors = validatePartnerForm(form);\r\n    if (errors.length) {\r\n      errors.forEach(err => toast.error(err));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(getApiUrl('submit-partner-form.php'), {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(form)\r\n      });\r\n\r\n      const data = await res.json();\r\n      if (data.status === 'success') {\r\n        toast.success(data.message || \"Submitted successfully.\");\r\n        setForm({\r\n          name: '',\r\n          email: '',\r\n          contact: '',\r\n          state_id: '',\r\n          city_id: '',\r\n          isFranchise: '', // Reset the new field\r\n          message: ''\r\n        });\r\n\r\n          setShowModal(true); // ✅ Show Thank You Modal\r\n\r\n          // Auto close after 3s\r\n        setTimeout(() => setShowModal(false), 3000);\r\n\r\n      } else {\r\n        toast.error(data.message || \"Submission failed.\");\r\n      }\r\n    } catch (err) {\r\n      toast.error(\"Server error. Please try again later.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"partner-wrapper\">\r\n      <ToastContainer position=\"top-right\" autoClose={4000} />\r\n      <section className=\"partner-hero\">\r\n        <h1>Partner with Us</h1>\r\n        <p className=\"quote\">“Alone we can do so little; together we can do so much.” – Helen Keller</p>\r\n      </section>\r\n\r\n      <section className=\"partner-benefits\">\r\n        <h2>Why Become Our Partner?</h2>\r\n        <ul>\r\n          <li>✔ Expand your reach and grow your business</li>\r\n          <li>✔ Get access to premium tools and support</li>\r\n          <li>✔ Work with a trusted brand and loyal community</li>\r\n          <li>✔ Earn more through collaboration</li>\r\n        </ul>\r\n      </section>\r\n\r\n      <section className=\"partner-form-section\">\r\n        <h2>Join Our Network</h2>\r\n        <form className=\"partner-form\" onSubmit={handleSubmit}>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <input type=\"text\" name=\"name\" placeholder=\"Your Name\" value={form.name} onChange={handleChange} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input type=\"email\" name=\"email\" placeholder=\"Your Email\" value={form.email} onChange={handleChange} />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <input type=\"text\" name=\"contact\" placeholder=\"Contact Number\" value={form.contact} onChange={handleChange} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <Select\r\n                name=\"state_id\"\r\n                value={states.find(opt => opt.value === form.state_id) || null}\r\n                onChange={opt => setForm(prev => ({ ...prev, state_id: opt ? opt.value : '' }))}\r\n                options={states}\r\n                placeholder=\"Select State\"\r\n                isClearable\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group\">\r\n              <Select\r\n                name=\"city_id\"\r\n                value={cities.find(opt => opt.value === form.city_id) || null}\r\n                onChange={opt => setForm(prev => ({ ...prev, city_id: opt ? opt.value : '' }))}\r\n                options={cities}\r\n                placeholder=\"Select City\"\r\n                isClearable\r\n                isDisabled={!form.state_id}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n            \r\n              <select\r\n              placeholder=\"interested in a Franmax India franchise\"\r\n                id=\"isFranchise\"\r\n                name=\"isFranchise\"\r\n                value={form.isFranchise}\r\n                onChange={handleChange}\r\n                required\r\n              >\r\n                <option value=\"\" disabled>Interested in a Franmax India franchise??</option>\r\n                <option value=\"yes\">Yes</option>\r\n                <option value=\"no\">No</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group full-width\">\r\n              <textarea name=\"message\" placeholder=\"Your Message\" value={form.message} onChange={handleChange} />\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n\r\n        {/* ✅ Thank You Modal */}\r\n      <ThankYouModal\r\n        show={showModal}\r\n        onClose={() => setShowModal(false)}\r\n        message=\"Thank you for submitting your business details! Our team will contact you shortly.\"\r\n      />\r\n\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Partner;","// File: src/utils/validatePartnerForm.js\r\n\r\nexport const validatePartnerForm = (form) => {\r\n  const errors = [];\r\n\r\n  if (!form.name.trim()) {\r\n    errors.push(\"Name is required.\");\r\n  }\r\n\r\n  if (!form.email.trim() || !/^\\S+@\\S+\\.\\S+$/.test(form.email)) {\r\n    errors.push(\"Valid email is required.\");\r\n  }\r\n\r\n  if (!form.contact.trim() || !/^[6-9]\\d{9}$/.test(form.contact)) {\r\n    errors.push(\"Contact must be 10 digits starting with 6-9.\");\r\n  }\r\n\r\n  if (!form.state_id || isNaN(form.state_id)) {\r\n    errors.push(\"State is required.\");\r\n  }\r\n\r\n  if (!form.city_id || isNaN(form.city_id)) {\r\n    errors.push(\"City is required.\");\r\n  }\r\n\r\n  if (!form.message.trim()) {\r\n    errors.push(\"Message is required.\");\r\n  }\r\n\r\n  return errors;\r\n};\r\n"],"names":["Partner","states","setStates","useState","cities","setCities","form","setForm","name","email","contact","state_id","city_id","isFranchise","message","showModal","setShowModal","useEffect","fetch","getApiUrl","then","res","json","data","options","map","state","value","id","label","concat","city","handleChange","e","target","prev","_objectSpread","_jsxs","className","children","_jsx","ToastContainer","position","autoClose","onSubmit","async","preventDefault","errors","trim","push","test","isNaN","validatePartnerForm","length","forEach","err","toast","error","method","headers","body","JSON","stringify","status","success","setTimeout","type","placeholder","onChange","Select","find","opt","isClearable","isDisabled","required","disabled","ThankYouModal","show","onClose"],"sourceRoot":""}